{
	"classes": {
		"Array": {
			"_": {
				"comment": "/**\r\n* Array class\r\n* @summary [Array@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\r\n* @class Array\r\n* @global\r\n* @type {array}\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 5,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Array class",
				"summary": "[Array@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}",
				"kind": "class",
				"name": "Array",
				"scope": "global",
				"type": {
					"names": [
						"array"
					]
				},
				"longname": "Array"
			},
			"Delete": {
				"_": {
					"comment": "/**\r\n* Delete array item\r\n* @memberof Array#\r\n* @instance\r\n* @function Delete\r\n* @param {*} elements - Element or array of elements to delete\r\n* @param {array} array - The modified array\r\n* @tutorial Array/Delete\r\n* @example exname\r\n* ['one', 'two', 'three'].Delete('two')\r\n*/",
					"meta": {
						"filename": "Delete.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Delete array item",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Delete",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Element or array of elements to delete",
							"name": "elements"
						},
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "The modified array",
							"name": "array"
						}
					],
					"tutorials": [
						"Array/Delete"
					],
					"examples": [
						"exname\r['one', 'two', 'three'].Delete('two')"
					],
					"longname": "Array#Delete"
				}
			},
			"DeleteAt": {
				"_": {
					"comment": "/**\r\n* DeleteAt array item\r\n* @memberof Array#\r\n* @instance\r\n* @function DeleteAt\r\n* @param {number} indexes - Index or array of indexes to delete\r\n* @param {array} array - The modified array\r\n*/",
					"meta": {
						"filename": "DeleteAt.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "DeleteAt array item",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "DeleteAt",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"description": "Index or array of indexes to delete",
							"name": "indexes"
						},
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "The modified array",
							"name": "array"
						}
					],
					"longname": "Array#DeleteAt"
				}
			},
			"Difference": {
				"_": {
					"comment": "/**\r\n* Difference in arrays\r\n* @memberof Array#\r\n* @instance\r\n* @function Difference\r\n* @param {*} lists - Array or list of arrays\r\n* @returns {array} diff - List of diffference values\r\n*/",
					"meta": {
						"filename": "Difference.js",
						"lineno": 37,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Difference in arrays",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Difference",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Array or list of arrays",
							"name": "lists"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "diff - List of diffference values"
						}
					],
					"longname": "Array#Difference"
				}
			},
			"first": {
				"_": {
					"comment": "/**\r\n* First element in an array\r\n* @memberof Array#\r\n* @instance\r\n* @member {*} first\r\n* @returns {*} element - The first element of the array\r\n*/",
					"meta": {
						"filename": "first.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "First element in an array",
					"memberof": "Array",
					"scope": "instance",
					"kind": "member",
					"name": "first",
					"type": {
						"names": [
							"*"
						]
					},
					"returns": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "element - The first element of the array"
						}
					],
					"longname": "Array#first"
				}
			},
			"Flatten": {
				"_": {
					"comment": "/**\r\n* Flatten array elements\r\n* @memberof Array.\r\n* @static\r\n* @function Flatten\r\n* @param {number} depth\r\n* @returns {array} list - Flattened list\r\n*/",
					"meta": {
						"filename": "Flatten.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Flatten array elements",
					"memberof": "Array",
					"scope": "static",
					"kind": "function",
					"name": "Flatten",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"name": "depth"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "list - Flattened list"
						}
					],
					"longname": "Array.Flatten"
				}
			},
			"From": {
				"_": {
					"comment": "/**\r\n* Converts value to an array\r\n* @memberof Array.\r\n* @static\r\n* @function From\r\n* @param {*} value - value to convert\r\n* @return {array} array - The converted array\r\n*/",
					"meta": {
						"filename": "From.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Converts value to an array",
					"memberof": "Array",
					"scope": "static",
					"kind": "function",
					"name": "From",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "value to convert",
							"name": "value"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array - The converted array"
						}
					],
					"longname": "Array.From"
				}
			},
			"head": {
				"_": {
					"comment": "/**\r\n* Gets all but the last element of array\r\n* @memberof Array#\r\n* @instance\r\n* @member {array} head\r\n* @param {array} array -  All but the last element of array\r\n*/",
					"meta": {
						"filename": "head.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Gets all but the last element of array",
					"memberof": "Array",
					"scope": "instance",
					"kind": "member",
					"name": "head",
					"type": {
						"names": [
							"array"
						]
					},
					"params": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "All but the last element of array",
							"name": "array"
						}
					],
					"longname": "Array#head"
				}
			},
			"Intersection": {
				"_": {
					"comment": "/**\r\n* Array Intersection\r\n* @memberof Array#\r\n* @instance\r\n* @function Intersection\r\n* @param {*} lists - Array or array list\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "Intersection.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Array Intersection",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Intersection",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Array or array list",
							"name": "lists"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#Intersection"
				}
			},
			"IsArray": {
				"_": {
					"comment": "/**\r\n* Check if an object is an array\r\n* @memberof Array.\r\n* @static\r\n* @function IsArray\r\n* @param {object} object - Object to check if an array\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "IsArray.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Check if an object is an array",
					"memberof": "Array",
					"scope": "static",
					"kind": "function",
					"name": "IsArray",
					"params": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "Object to check if an array",
							"name": "object"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "Array.IsArray"
				}
			},
			"last": {
				"_": {
					"comment": "/**\r\n* Gets the last element of an array\r\n* @memberof Array#\r\n* @instance\r\n* @member {*} last\r\n* @returns {*} element -  The last element of the array\r\n*/",
					"meta": {
						"filename": "last.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Gets the last element of an array",
					"memberof": "Array",
					"scope": "instance",
					"kind": "member",
					"name": "last",
					"type": {
						"names": [
							"*"
						]
					},
					"returns": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "element -  The last element of the array"
						}
					],
					"longname": "Array#last"
				}
			},
			"Omit": {
				"_": {
					"comment": "/**\r\n* Create a new array with elements omitted\r\n* @memberof Array#\r\n* @instance\r\n* @function Omit\r\n* @param {*} elements - Elements to omit\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "Omit.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Create a new array with elements omitted",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Omit",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Elements to omit",
							"name": "elements"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#Omit"
				}
			},
			"OmitAt": {
				"_": {
					"comment": "/**\r\n* Create a new array with elements omitted at certain indexes\r\n* @memberof Array#\r\n* @instance\r\n* @function OmitAt\r\n* @param {*} indexes - Indexes of elements to omit\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "OmitAt.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Create a new array with elements omitted at certain indexes",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "OmitAt",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Indexes of elements to omit",
							"name": "indexes"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#OmitAt"
				}
			},
			"Pick": {
				"_": {
					"comment": "/**\r\n* Pick elements of an array\r\n* @memberof Array#\r\n* @instance\r\n* @function Pick\r\n* @param {*} elements - Elements to select\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "Pick.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Pick elements of an array",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Pick",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Elements to select",
							"name": "elements"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#Pick"
				}
			},
			"Shuffle": {
				"_": {
					"comment": "/**\r\n* In-place array shuffle\r\n* @memberof Array#\r\n* @instance\r\n* @function Shuffle\r\n*/",
					"meta": {
						"filename": "Shuffle.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "In-place array shuffle",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Shuffle",
					"longname": "Array#Shuffle"
				}
			},
			"tail": {
				"_": {
					"comment": "/**\r\n* Gets all but the first element of array\r\n* @memberof Array#\r\n* @instance\r\n* @member {array} tail\r\n* @param {array} array -  All but the first element of array\r\n*/",
					"meta": {
						"filename": "tail.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Gets all but the first element of array",
					"memberof": "Array",
					"scope": "instance",
					"kind": "member",
					"name": "tail",
					"type": {
						"names": [
							"array"
						]
					},
					"params": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "All but the first element of array",
							"name": "array"
						}
					],
					"longname": "Array#tail"
				}
			},
			"Union": {
				"_": {
					"comment": "/**\r\n* Array Union\r\n* @memberof Array#\r\n* @instance\r\n* @function Union\r\n* @param {*} lists - Array or array list\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "Union.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Array Union",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Union",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Array or array list",
							"name": "lists"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#Union"
				}
			},
			"Unique": {
				"_": {
					"comment": "/**\r\n* Array Unique\r\n* @memberof Array#\r\n* @instance\r\n* @function Unique\r\n* @param {*} lists - Array or array list\r\n* @returns {array} array\r\n*/",
					"meta": {
						"filename": "Unique.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Array Unique",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Unique",
					"params": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Array or array list",
							"name": "lists"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "array"
						}
					],
					"longname": "Array#Unique"
				}
			},
			"Xor": {
				"_": {
					"comment": "/**\r\n* Array Xor\r\n* @memberof Array#\r\n* @instance\r\n* @function Xor\r\n* @param {array} lists - Array or array list\r\n* @param {array} array\r\n*/",
					"meta": {
						"filename": "Xor.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Array",
						"code": {}
					},
					"description": "Array Xor",
					"memberof": "Array",
					"scope": "instance",
					"kind": "function",
					"name": "Xor",
					"params": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "Array or array list",
							"name": "lists"
						},
						{
							"type": {
								"names": [
									"array"
								]
							},
							"name": "array"
						}
					],
					"longname": "Array#Xor"
				}
			}
		},
		"Function": {
			"_": {
				"comment": "/**\r\n* Function class\r\n* @summary [String@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function}\r\n* @class Function\r\n* @global\r\n* @type {function}\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 13,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Function class",
				"summary": "[String@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function}",
				"kind": "class",
				"name": "Function",
				"scope": "global",
				"type": {
					"names": [
						"function"
					]
				},
				"longname": "Function"
			},
			"Debug": {
				"_": {
					"comment": "/**\r\n * Debug Helper Function\r\n *\r\n * @memberof Function.\r\n * @function Debug\r\n * @param {string} name\r\n * @param {function} logFn\r\n * @param (callback} cb\r\n */",
					"meta": {
						"filename": "Debug.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Function",
						"code": {}
					},
					"description": "Debug Helper Function",
					"memberof": "Function",
					"kind": "function",
					"name": "Debug",
					"params": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"name": "name"
						},
						{
							"type": {
								"names": [
									"function"
								]
							},
							"name": "logFn"
						},
						{
							"description": "cb",
							"name": "(callback}"
						}
					],
					"longname": "Function.Debug",
					"scope": "static"
				}
			},
			"Delay": {
				"_": {
					"comment": "/**\r\n* Delay function\r\n* @memberof Function.\r\n* @function Delay\r\n* @param {number} time - time to delay\r\n* @param {callback} cb - callback function\r\n* @param {...*} args - args to pass to callback\r\n*/",
					"meta": {
						"filename": "Delay.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Function",
						"code": {}
					},
					"description": "Delay function",
					"memberof": "Function",
					"kind": "function",
					"name": "Delay",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"description": "time to delay",
							"name": "time"
						},
						{
							"type": {
								"names": [
									"callback"
								]
							},
							"description": "callback function",
							"name": "cb"
						},
						{
							"type": {
								"names": [
									"*"
								]
							},
							"variable": true,
							"description": "args to pass to callback",
							"name": "args"
						}
					],
					"longname": "Function.Delay",
					"scope": "static"
				}
			},
			"Noop": {
				"_": {
					"comment": "/**\r\n* No op function\r\n*\r\n* @memberof Function.\r\n* @function Noop\r\n*/",
					"meta": {
						"filename": "Noop.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Function",
						"code": {}
					},
					"description": "No op function",
					"memberof": "Function",
					"kind": "function",
					"name": "Noop",
					"longname": "Function.Noop",
					"scope": "static"
				}
			}
		},
		"Object": {
			"_": {
				"comment": "/**\r\n* Object class\r\n* @summary [Object@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object}\r\n* @class Object\r\n* @global\r\n* @type {object}\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 21,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Object class",
				"summary": "[Object@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object}",
				"kind": "class",
				"name": "Object",
				"scope": "global",
				"type": {
					"names": [
						"object"
					]
				},
				"longname": "Object"
			},
			"Extensions": {
				"_": {
					"comment": "/**\r\n * Object extensions\r\n *\r\n * @property {object} Extensions\r\n */",
					"meta": {
						"range": [
							70,
							92
						],
						"filename": "Extensions.js",
						"lineno": 6,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src",
						"code": {
							"id": "astnode100001032",
							"name": "Object.Extensions",
							"type": "ObjectExpression",
							"value": "{}",
							"paramnames": []
						}
					},
					"description": "Object extensions",
					"properties": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"name": "Extensions"
						}
					],
					"name": "Extensions",
					"longname": "Object.Extensions",
					"kind": "member",
					"memberof": "Object",
					"scope": "static"
				},
				"EventEmitter": {
					"_": {
						"comment": "/**\r\n* @property {Plugin} EventEmitter\r\n*/",
						"meta": {
							"range": [
								44,
								7912
							],
							"filename": "EventEmitter.js",
							"lineno": 4,
							"columnno": 0,
							"path": "D:\\TTS\\development\\js.core\\src\\Extensions",
							"code": {
								"id": "astnode100002656",
								"name": "Object.Extensions.EventEmitter",
								"type": "FunctionExpression",
								"paramnames": [
									"o"
								]
							},
							"vars": {
								"R": "Object.Extensions.EventEmitter~R",
								"ReflectApply": "Object.Extensions.EventEmitter~ReflectApply",
								"": null,
								"ReflectOwnKeys": "Object.Extensions.EventEmitter~ReflectOwnKeys",
								"ProcessEmitWarning": "Object.Extensions.EventEmitter~ProcessEmitWarning",
								"NumberIsNaN": "Object.Extensions.EventEmitter~NumberIsNaN",
								"defaultMaxListeners": "Object.Extensions.EventEmitter~defaultMaxListeners",
								"setMaxListeners": "Object.Extensions.EventEmitter~setMaxListeners",
								"$getMaxListeners": "Object.Extensions.EventEmitter~$getMaxListeners",
								"getMaxListeners": "Object.Extensions.EventEmitter~getMaxListeners",
								"emit": "Object.Extensions.EventEmitter~emit",
								"_addListener": "Object.Extensions.EventEmitter~_addListener",
								"addListener": "Object.Extensions.EventEmitter~addListener",
								"prependListener": "Object.Extensions.EventEmitter~prependListener",
								"onceWrapper": "Object.Extensions.EventEmitter~onceWrapper",
								"_onceWrap": "Object.Extensions.EventEmitter~_onceWrap",
								"once": "Object.Extensions.EventEmitter~once",
								"prependOnceListener": "Object.Extensions.EventEmitter~prependOnceListener",
								"removeListener": "Object.Extensions.EventEmitter~removeListener",
								"removeAllListeners": "Object.Extensions.EventEmitter~removeAllListeners",
								"_listeners": "Object.Extensions.EventEmitter~_listeners",
								"listeners": "Object.Extensions.EventEmitter~listeners",
								"rawListeners": "Object.Extensions.EventEmitter~rawListeners",
								"listenerCount": "Object.Extensions.EventEmitter~listenerCount",
								"eventNames": "Object.Extensions.EventEmitter~eventNames",
								"arrayClone": "Object.Extensions.EventEmitter~arrayClone",
								"spliceOne": "Object.Extensions.EventEmitter~spliceOne",
								"unwrapListeners": "Object.Extensions.EventEmitter~unwrapListeners"
							}
						},
						"properties": [
							{
								"type": {
									"names": [
										"Plugin"
									]
								},
								"name": "EventEmitter"
							}
						],
						"name": "EventEmitter",
						"longname": "Object.Extensions.EventEmitter",
						"kind": "function",
						"memberof": "Object.Extensions",
						"scope": "static"
					}
				}
			},
			"Clone": {
				"_": {
					"comment": "/**\r\n* Recursively (deep) clone\r\n* @memberof Object#\r\n* @instance\r\n* @function Clone\r\n* @return {object} - The cloned object\r\n*/",
					"meta": {
						"filename": "Clone.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Recursively (deep) clone",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Clone",
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "- The cloned object"
						}
					],
					"longname": "Object#Clone"
				}
			},
			"Define": {
				"_": {
					"comment": "/**\r\n* Defines object elements\r\n* @memberof Object#\r\n* @instance\r\n* @function Define\r\n* @param {string} name - Name of property\r\n* @param {*} value - Value of property\r\n* @param {boolean} [enumerable]\r\n* @returns {object}\r\n*/",
					"meta": {
						"filename": "Define.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Defines object elements",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Define",
					"params": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "Name of property",
							"name": "name"
						},
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Value of property",
							"name": "value"
						},
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"optional": true,
							"name": "enumerable"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							}
						}
					],
					"longname": "Object#Define"
				}
			},
			"Each": {
				"_": {
					"comment": "/**\r\n* Object elements iterator\r\n* @memberof Object#\r\n* @instance\r\n* @function Each\r\n* @param {function} fn - Iterator function\r\n* @param {object} this - Iterator this value\r\n*/",
					"meta": {
						"filename": "Each.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Object elements iterator",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Each",
					"params": [
						{
							"type": {
								"names": [
									"function"
								]
							},
							"description": "Iterator function",
							"name": "fn"
						},
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "Iterator this value",
							"name": "this"
						}
					],
					"longname": "Object#Each"
				}
			},
			"Extend": {
				"_": {
					"comment": "/**\r\n* Extend the contents of two or more objects into the target object\r\n* @memberof Object#\r\n* @instance\r\n* @function Extend\r\n* @param {...(object|array)} source\r\n* @return {object}\r\n*/",
					"meta": {
						"filename": "Extend.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Extend the contents of two or more objects into the target object",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Extend",
					"params": [
						{
							"type": {
								"names": [
									"object",
									"array"
								]
							},
							"variable": true,
							"name": "source"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							}
						}
					],
					"longname": "Object#Extend"
				}
			},
			"Get": {
				"_": {
					"comment": "/**\r\n* Get object value at the given path\r\n* @memberof Object#\r\n* @instance\r\n* @function Get\r\n* @param {string} path - The element object path\r\n* @param {*} default - Value to return if invalid object path\r\n* @return {*}  value\r\n*/",
					"meta": {
						"filename": "Get.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Get object value at the given path",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Get",
					"params": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "The element object path",
							"name": "path"
						},
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "Value to return if invalid object path",
							"name": "default"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"*"
								]
							},
							"description": "value"
						}
					],
					"longname": "Object#Get"
				}
			},
			"Has": {
				"_": {
					"comment": "/**\r\n* Check if object has the child element paths\r\n* @memberof Object#\r\n* @instance\r\n* @function Has\r\n* @param {string[]} paths - Array of paths\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "Has.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Check if object has the child element paths",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Has",
					"params": [
						{
							"type": {
								"names": [
									"Array.<string>"
								]
							},
							"description": "Array of paths",
							"name": "paths"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "Object#Has"
				}
			},
			"Includes": {
				"_": {
					"comment": "/**\r\n* Check if object has the child element paths\r\n* @memberof Object#\r\n* @instance\r\n* @function Includes\r\n* @param {string[]} paths - Array of paths\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "Includes.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Check if object has the child element paths",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Includes",
					"params": [
						{
							"type": {
								"names": [
									"Array.<string>"
								]
							},
							"description": "Array of paths",
							"name": "paths"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "Object#Includes"
				}
			},
			"IsEqual": {
				"_": {
					"comment": "/**\r\n* Determines if objects are equal\r\n* @memberof Object#\r\n* @instance\r\n* @function IsEqual\r\n* @param {object[]} objects\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "IsEqual.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Determines if objects are equal",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "IsEqual",
					"params": [
						{
							"type": {
								"names": [
									"Array.<object>"
								]
							},
							"name": "objects"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "Object#IsEqual"
				}
			},
			"Keys": {
				"_": {
					"comment": "/**\r\n* Creates an array of the own enumerable property names of object\r\n* @memberof Object#\r\n* @instance\r\n* @function Keys\r\n* @returns {array} property names\r\n*/",
					"meta": {
						"filename": "Keys.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Creates an array of the own enumerable property names of object",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Keys",
					"returns": [
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "property names"
						}
					],
					"longname": "Object#Keys"
				}
			},
			"Merge": {
				"_": {
					"comment": "/**\r\n* Assigns own and inherited enumerable string keyed properties of source objects to the object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.\r\n* @memberof Object#\r\n* @instance\r\n* @function Merge\r\n* @param {...(object|array)} sources\r\n* @return {object}\r\n*/",
					"meta": {
						"filename": "Merge.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Assigns own and inherited enumerable string keyed properties of source objects to the object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Merge",
					"params": [
						{
							"type": {
								"names": [
									"object",
									"array"
								]
							},
							"variable": true,
							"name": "sources"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							}
						}
					],
					"longname": "Object#Merge"
				}
			},
			"Paths": {
				"_": {
					"comment": "/**\r\n* Gets a list of object element paths\r\n* @memberof Object#\r\n* @instance\r\n* @function Paths\r\n* @param {number} [depth] - Depth of recursion\r\n* @param {array} paths - The object element paths\r\n*/",
					"meta": {
						"filename": "Paths.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Gets a list of object element paths",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Paths",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"optional": true,
							"description": "Depth of recursion",
							"name": "depth"
						},
						{
							"type": {
								"names": [
									"array"
								]
							},
							"description": "The object element paths",
							"name": "paths"
						}
					],
					"longname": "Object#Paths"
				}
			},
			"Pick": {
				"_": {
					"comment": "/**\r\n* Creates an object composed of the picked object properties\r\n* @memberof Object#\r\n* @instance\r\n* @function Pick\r\n* @param {...(string|string[])} paths\r\n* @returns {object} object\r\n*/",
					"meta": {
						"filename": "Pick.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Creates an object composed of the picked object properties",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Pick",
					"params": [
						{
							"type": {
								"names": [
									"string",
									"Array.<string>"
								]
							},
							"variable": true,
							"name": "paths"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "object"
						}
					],
					"longname": "Object#Pick"
				}
			},
			"Set": {
				"_": {
					"comment": "/**\r\n* Set a value on object at path\r\n* @memberof Object#\r\n* @instance\r\n* @function Set\r\n* @param {string} path - Object element path\r\n* @param {*} value\r\n* @returns {object} object\r\n*/",
					"meta": {
						"filename": "Set.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Set a value on object at path",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Set",
					"params": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "Object element path",
							"name": "path"
						},
						{
							"type": {
								"names": [
									"*"
								]
							},
							"name": "value"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "object"
						}
					],
					"longname": "Object#Set"
				}
			},
			"Trim": {
				"_": {
					"comment": "/**\r\n* Trim empty, null, undefined elements from an object\r\n* @memberof Object#\r\n* @instance\r\n* @function Trim\r\n* @returns {object} object\r\n*/",
					"meta": {
						"filename": "Trim.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Trim empty, null, undefined elements from an object",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Trim",
					"returns": [
						{
							"type": {
								"names": [
									"object"
								]
							},
							"description": "object"
						}
					],
					"longname": "Object#Trim"
				}
			},
			"Type": {
				"_": {
					"comment": "/**\r\n* Object Type lookup\r\n* @memberof Object#\r\n* @instance\r\n* @function Type\r\n* @param {...(string|object)} [compare] - Comparison type label string or object\r\n* @returns {(string|boolean)} result - String representing item type or a boolean from type comparisons\r\n*/",
					"meta": {
						"filename": "Type.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\Object",
						"code": {}
					},
					"description": "Object Type lookup",
					"memberof": "Object",
					"scope": "instance",
					"kind": "function",
					"name": "Type",
					"params": [
						{
							"type": {
								"names": [
									"string",
									"object"
								]
							},
							"optional": true,
							"variable": true,
							"description": "Comparison type label string or object",
							"name": "compare"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string",
									"boolean"
								]
							},
							"description": "result - String representing item type or a boolean from type comparisons"
						}
					],
					"longname": "Object#Type"
				}
			}
		},
		"String": {
			"_": {
				"comment": "/**\r\n* String class\r\n* @summary [String@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String}\r\n* @class String\r\n* @global\r\n* @type {string}\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 29,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "String class",
				"summary": "[String@MDN]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String}",
				"kind": "class",
				"name": "String",
				"scope": "global",
				"type": {
					"names": [
						"string"
					]
				},
				"longname": "String"
			},
			"AsAscii": {
				"_": {
					"comment": "/**\r\n* String as ascii text\r\n* @memberof String#\r\n* @instance\r\n* @function AsAscii\r\n* @returns {string} text - The ascii text\r\n*/",
					"meta": {
						"filename": "AsAscii.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "String as ascii text",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "AsAscii",
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text - The ascii text"
						}
					],
					"longname": "String#AsAscii"
				}
			},
			"AsBase64": {
				"_": {
					"comment": "/**\r\n* String as base64 text\r\n* @memberof String#\r\n* @instance\r\n* @function AsBase64\r\n* @returns {string} text - The base64 text\r\n*/",
					"meta": {
						"filename": "AsBase64.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "String as base64 text",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "AsBase64",
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text - The base64 text"
						}
					],
					"longname": "String#AsBase64"
				}
			},
			"AsUrlMatch": {
				"_": {
					"comment": "/**\r\n* String as converted to url match pattern\r\n* @memberof String#\r\n* @instance\r\n* @function AsUrlMatch\r\n* @returns {string} pattern - The match pattern\r\n*/",
					"meta": {
						"filename": "AsUrlMatch.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "String as converted to url match pattern",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "AsUrlMatch",
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "pattern - The match pattern"
						}
					],
					"longname": "String#AsUrlMatch"
				}
			},
			"CamelCase": {
				"_": {
					"comment": "/**\r\n* String converted to camel case\r\n* @memberof String#\r\n* @instance\r\n* @function CamelCase\r\n* @param {boolean} [UpperCamel] - Set if Upper Camel Case\r\n* @returns {string} text - Text with camel case\r\n*/",
					"meta": {
						"filename": "CamelCase.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "String converted to camel case",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "CamelCase",
					"params": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"optional": true,
							"description": "Set if Upper Camel Case",
							"name": "UpperCamel"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text - Text with camel case"
						}
					],
					"longname": "String#CamelCase"
				}
			},
			"Capitalize": {
				"_": {
					"comment": "/**\r\n* Capitalize words in a string\r\n* @memberof String#\r\n* @instance\r\n* @function Capitalize\r\n* @param {boolean} [AllWords] - Capitalize first letter of each word\r\n* @returns {string} text - Capitalized text\r\n*/",
					"meta": {
						"filename": "Capitalize.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Capitalize words in a string",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "Capitalize",
					"params": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"optional": true,
							"description": "Capitalize first letter of each word",
							"name": "AllWords"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text - Capitalized text"
						}
					],
					"longname": "String#Capitalize"
				}
			},
			"Hash": {
				"_": {
					"comment": "/**\r\n* Generates a hash string\r\n* @memberof String#\r\n* @instance\r\n* @function Hash\r\n* @param {string} type - Hash type (sha1/md5)\r\n* @returns {string} hash - Hash string\r\n*/",
					"meta": {
						"filename": "Hash.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Generates a hash string",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "Hash",
					"params": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "Hash type (sha1/md5)",
							"name": "type"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "hash - Hash string"
						}
					],
					"longname": "String#Hash"
				}
			},
			"IsBase64": {
				"_": {
					"comment": "/**\r\n* Tests if a string is Base64 format\r\n* @memberof String#\r\n* @instance\r\n* @function IsBase64\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "IsBase64.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Tests if a string is Base64 format",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "IsBase64",
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "String#IsBase64"
				}
			},
			"IsEmpty": {
				"_": {
					"comment": "/**\r\n* Checks if a string is empty, null or undefined\r\n* @memberof String#\r\n* @instance\r\n* @function IsEmpty\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "IsEmpty.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Checks if a string is empty, null or undefined",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "IsEmpty",
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "String#IsEmpty"
				}
			},
			"IsJson": {
				"_": {
					"comment": "/**\r\n* Test whether a string is JSON\r\n* @memberof String#\r\n* @instance\r\n* @function IsJson\r\n* @returns {boolean} result\r\n*/",
					"meta": {
						"filename": "IsJson.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Test whether a string is JSON",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "IsJson",
					"returns": [
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"description": "result"
						}
					],
					"longname": "String#IsJson"
				}
			},
			"Pad": {
				"_": {
					"comment": "/**\r\n* Pads a string out to a certain width\r\n* @memberof String#\r\n* @instance\r\n* @function Pad\r\n* @param {number} length - Length of the string in chars\r\n* @param {string} [char] - Char to pad with\r\n* @param {boolean} [rightPad] - Pad chars tot he right instead of the left\r\n* @returns {string} text - Padded string\r\n*/",
					"meta": {
						"filename": "Pad.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Pads a string out to a certain width",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "Pad",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"description": "Length of the string in chars",
							"name": "length"
						},
						{
							"type": {
								"names": [
									"string"
								]
							},
							"optional": true,
							"description": "Char to pad with",
							"name": "char"
						},
						{
							"type": {
								"names": [
									"boolean"
								]
							},
							"optional": true,
							"description": "Pad chars tot he right instead of the left",
							"name": "rightPad"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text - Padded string"
						}
					],
					"longname": "String#Pad"
				}
			},
			"Repeat": {
				"_": {
					"comment": "/**\r\n* Repeats a string of text n times\r\n* @memberof String#\r\n* @instance\r\n* @function Repeat\r\n* @param {number} n - Number of times to repeat\r\n* @returns {string} text\r\n*/",
					"meta": {
						"filename": "Repeat.js",
						"lineno": 1,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src\\String",
						"code": {}
					},
					"description": "Repeats a string of text n times",
					"memberof": "String",
					"scope": "instance",
					"kind": "function",
					"name": "Repeat",
					"params": [
						{
							"type": {
								"names": [
									"number"
								]
							},
							"description": "Number of times to repeat",
							"name": "n"
						}
					],
					"returns": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"description": "text"
						}
					],
					"longname": "String#Repeat"
				}
			}
		}
	},
	"modules": {
		"pkg-tools/tasks/bump": {
			"_": {
				"comment": "/**\r\n * @fileoverview GruntJs task to bump package version\r\n * @copyright Tyler Thayn 2023\r\n * @author Tyler Thayn <tylertthayn@gmail.com>\r\n * @license MIT\r\n *\r\n * @module pkg-tools/tasks/bump\r\n */",
				"meta": {
					"filename": "bump.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\pkg-tools\\tasks",
					"code": {}
				},
				"name": "pkg-tools/tasks/bump",
				"kind": "module",
				"description": "GruntJs task to bump package version",
				"preserveName": true,
				"copyright": "Tyler Thayn 2023",
				"author": [
					"Tyler Thayn <tylertthayn@gmail.com>"
				],
				"license": "MIT",
				"longname": "module:pkg-tools/tasks/bump"
			}
		},
		"core": {
			"_": {
				"comment": "/**\r\n * @module @tyler.thayn/js.core\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"kind": "module",
				"name": "core",
				"memberof": "@tyler.thayn/js",
				"longname": "@tyler.thayn/js.module:core",
				"scope": "static"
			},
			"tyler": {
				"_": {
					"comment": "/**\r\n* @namespace tyler\r\n*/",
					"meta": {
						"filename": "index.js",
						"lineno": 38,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src",
						"code": {}
					},
					"kind": "namespace",
					"name": "tyler",
					"longname": "@tyler.thayn/js.module:core~tyler",
					"scope": "inner",
					"memberof": "@tyler.thayn/js.module:core"
				}
			},
			"Plugin": {
				"_": {
					"comment": "/**\r\n* @typedef {function} Plugin\r\n* @param {object}\r\n*/",
					"meta": {
						"filename": "index.js",
						"lineno": 42,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src",
						"code": {}
					},
					"kind": "typedef",
					"name": "Plugin",
					"type": {
						"names": [
							"function"
						]
					},
					"params": [
						{
							"type": {
								"names": [
									"object"
								]
							}
						}
					],
					"longname": "@tyler.thayn/js.module:core~Plugin",
					"scope": "inner",
					"memberof": "@tyler.thayn/js.module:core"
				}
			},
			"TOptions": {
				"_": {
					"comment": "/**\r\n* @typedef {object} TOptions\r\n* @property {string} name\r\n* @property {string|object} data\r\n*/",
					"meta": {
						"filename": "index.js",
						"lineno": 47,
						"columnno": 0,
						"path": "D:\\TTS\\development\\js.core\\src",
						"code": {}
					},
					"kind": "typedef",
					"name": "TOptions",
					"type": {
						"names": [
							"object"
						]
					},
					"properties": [
						{
							"type": {
								"names": [
									"string"
								]
							},
							"name": "name"
						},
						{
							"type": {
								"names": [
									"string",
									"object"
								]
							},
							"name": "data"
						}
					],
					"longname": "@tyler.thayn/js.module:core~TOptions",
					"scope": "inner",
					"memberof": "@tyler.thayn/js.module:core"
				}
			}
		}
	},
	"namespaces": {
		"tyler": {
			"_": {
				"comment": "/**\r\n* @namespace tyler\r\n*/",
				"meta": {
					"filename": "index.js",
					"lineno": 38,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"kind": "namespace",
				"name": "tyler",
				"longname": "@tyler.thayn/js.module:core~tyler",
				"scope": "inner",
				"memberof": "@tyler.thayn/js.module:core"
			}
		}
	},
	"global": {
		"global": {
			"_": {
				"comment": "/**\r\n* global reference\r\n* @global\r\n* @name global\r\n* @type {object}\r\n*/",
				"meta": {
					"filename": "global.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "global reference",
				"scope": "global",
				"name": "global",
				"type": {
					"names": [
						"object"
					]
				},
				"longname": "global",
				"kind": "member"
			}
		},
		"Clone": {
			"_": {
				"comment": "/**\r\n* Recursively (deep) clone\r\n* @global\r\n* @function Clone\r\n* @param {object} parent - Parent value to clone\r\n* @return {object} - The cloned object\r\n*/",
				"meta": {
					"filename": "Clone.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Recursively (deep) clone",
				"scope": "global",
				"kind": "function",
				"name": "Clone",
				"params": [
					{
						"type": {
							"names": [
								"object"
							]
						},
						"description": "Parent value to clone",
						"name": "parent"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"object"
							]
						},
						"description": "- The cloned object"
					}
				],
				"longname": "Clone"
			}
		},
		"Define": {
			"_": {
				"comment": "/**\r\n* Defines object elements\r\n* @global\r\n* @function Define\r\n* @param {object} obj - Object to define on\r\n* @param {string} name - Name of property\r\n* @param {*} value - Value of property\r\n* @param {boolean} [enumerable]\r\n* @returns {object}\r\n*/",
				"meta": {
					"filename": "Define.js",
					"lineno": 63,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Defines object elements",
				"scope": "global",
				"kind": "function",
				"name": "Define",
				"params": [
					{
						"type": {
							"names": [
								"object"
							]
						},
						"description": "Object to define on",
						"name": "obj"
					},
					{
						"type": {
							"names": [
								"string"
							]
						},
						"description": "Name of property",
						"name": "name"
					},
					{
						"type": {
							"names": [
								"*"
							]
						},
						"description": "Value of property",
						"name": "value"
					},
					{
						"type": {
							"names": [
								"boolean"
							]
						},
						"optional": true,
						"name": "enumerable"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"object"
							]
						}
					}
				],
				"longname": "Define"
			}
		},
		"Extend": {
			"_": {
				"comment": "/**\r\n\t* Extend the contents of two or more objects into the target object\r\n\t* @global\r\n\t* @function Extend\r\n\t* @param {(object|array)} target\r\n\t* @param {...(object|array)} sources\r\n\t* @return {object}\r\n\t*/",
				"meta": {
					"filename": "Extend.js",
					"lineno": 58,
					"columnno": 1,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Extend the contents of two or more objects into the target object",
				"scope": "global",
				"kind": "function",
				"name": "Extend",
				"params": [
					{
						"type": {
							"names": [
								"object",
								"array"
							]
						},
						"name": "target"
					},
					{
						"type": {
							"names": [
								"object",
								"array"
							]
						},
						"variable": true,
						"name": "sources"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"object"
							]
						}
					}
				],
				"longname": "Extend"
			}
		},
		"IsEqual": {
			"_": {
				"comment": "/**\r\n* Determines if objects are equal\r\n* @global\r\n* @function IsEqual\r\n* @param {object[]} objects\r\n* @returns {boolean} result\r\n*/",
				"meta": {
					"filename": "IsEqual.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Determines if objects are equal",
				"scope": "global",
				"kind": "function",
				"name": "IsEqual",
				"params": [
					{
						"type": {
							"names": [
								"Array.<object>"
							]
						},
						"name": "objects"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"boolean"
							]
						},
						"description": "result"
					}
				],
				"longname": "IsEqual"
			}
		},
		"log": {
			"_": {
				"comment": "/**\r\n * log\r\n *\r\n * @global\r\n * @function log\r\n * @param {string} msg\r\n */",
				"meta": {
					"filename": "log.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "log",
				"scope": "global",
				"kind": "function",
				"name": "log",
				"params": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "msg"
					}
				],
				"longname": "log"
			}
		},
		"logj": {
			"_": {
				"comment": "/**\r\n * JSON Logger\r\n *\r\n * @global\r\n * @function logj\r\n * @param {*} object - Object to log\r\n */",
				"meta": {
					"filename": "logj.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "JSON Logger",
				"scope": "global",
				"kind": "function",
				"name": "logj",
				"params": [
					{
						"type": {
							"names": [
								"*"
							]
						},
						"description": "Object to log",
						"name": "object"
					}
				],
				"longname": "logj"
			}
		},
		"Merge": {
			"_": {
				"comment": "/**\r\n* Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.\r\n* @global\r\n* @function Merge\r\n* @param {(object|array)} target\r\n* @param {...(object|array)} sources\r\n* @return {(object|array)} target\r\n*/",
				"meta": {
					"filename": "Merge.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.",
				"scope": "global",
				"kind": "function",
				"name": "Merge",
				"params": [
					{
						"type": {
							"names": [
								"object",
								"array"
							]
						},
						"name": "target"
					},
					{
						"type": {
							"names": [
								"object",
								"array"
							]
						},
						"variable": true,
						"name": "sources"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"object",
								"array"
							]
						},
						"description": "target"
					}
				],
				"longname": "Merge"
			}
		},
		"Type": {
			"_": {
				"comment": "/**\r\n* Object Type lookup\r\n* @global\r\n* @function Type\r\n* @param {*} item - Item to lookup type of\r\n* @param {(string|object)} [compare] - Comparison type label string or comparison object\r\n* @returns {(string|boolean)} result - String representing item type or a boolean from type comparisons\r\n*/",
				"meta": {
					"filename": "Type.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Object Type lookup",
				"scope": "global",
				"kind": "function",
				"name": "Type",
				"params": [
					{
						"type": {
							"names": [
								"*"
							]
						},
						"description": "Item to lookup type of",
						"name": "item"
					},
					{
						"type": {
							"names": [
								"string",
								"object"
							]
						},
						"optional": true,
						"description": "Comparison type label string or comparison object",
						"name": "compare"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"string",
								"boolean"
							]
						},
						"description": "result - String representing item type or a boolean from type comparisons"
					}
				],
				"longname": "Type"
			}
		},
		"Uuid": {
			"_": {
				"comment": "/**\r\n * Uuid\r\n *\r\n * @global\r\n * @function Uuid\r\n * @returns {string} uuid\r\n */",
				"meta": {
					"filename": "Uuid.js",
					"lineno": 1,
					"columnno": 0,
					"path": "D:\\TTS\\development\\js.core\\src",
					"code": {}
				},
				"description": "Uuid",
				"scope": "global",
				"kind": "function",
				"name": "Uuid",
				"returns": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"description": "uuid"
					}
				],
				"longname": "Uuid"
			}
		}
	}
}